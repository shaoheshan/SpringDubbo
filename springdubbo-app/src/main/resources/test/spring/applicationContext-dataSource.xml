<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
          http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"
	   default-autowire="byName" default-lazy-init="false">

	<!-- druid 数据源 -->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${frank.mysql.master.url}" />
		<property name="username" value="${frank.mysql.master.username}" />
		<property name="password" value="${frank.mysql.master.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="50" />
		<property name="minIdle" value="10" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />


		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>

	<!-- druid 数据源 -->
	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${frank.mysql.slave.url}" />
		<property name="username" value="${frank.mysql.slave.username}" />
		<property name="password" value="${frank.mysql.slave.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="50" />
		<property name="minIdle" value="10" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />


		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>

	<bean id="schedulerFactory"
		  class="org.springframework.scheduling.quartz.SchedulerFactoryBean" init-method="afterPropertiesSet">
		<property name="dataSource">
			<ref bean="masterDataSource" /> <!--Spring中对于的数据源 -->
		</property>
		<property name="startupDelay" value="100" />
		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
		<property name="configLocation" value="classpath:conf/quartz.properties" />
		<property name= "quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName" >managerScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId" >AUTO</prop>
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class" >org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount" >20</prop>
				<prop key="org.quartz.threadPool.threadPriority" >5</prop>
				<!-- JobStore 配置 -->
				<prop key="org.quartz.jobStore.class" >org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.driverDelegateClass" >org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
				<prop key="org.quartz.jobStore.useProperties">true</prop>
				<!-- 集群配置 -->
				<prop key="org.quartz.jobStore.isClustered" >true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval" >15000</prop>
				<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime" >1</prop>
				<prop key="org.quartz.jobStore.misfireThreshold" >120000</prop>
				<prop key="org.quartz.jobStore.tablePrefix" >QRTZ_</prop>
				<!-- <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>  -->
			</props>
		</property>
		<property name= "schedulerName" value="managerScheduler" />
		<!--启动时更新己存在的Job -->
		<property name= "overwriteExistingJobs" value="true" />
		<!-- 设置自动启动 改为监听启动-->
		<!-- <property name= "autoStartup" value ="true" /> -->
		<!--将job和Spring集成一起-->
		<property name="jobFactory" ref="jobFactory"></property>
	</bean>
	<bean id="jobFactory" class="com.heshan.dubbo.service.utils.MyJobFactory"></bean>
</beans>